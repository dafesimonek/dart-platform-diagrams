@startuml

skinparam {

    shadowing false
    arrowColor #46749F

    RectangleBorderColor #CCCCCC
    RectangleBackgroundColor #F5F2F0

    ComponentBorderColor #46749F
    ComponentBackgroundColor #E5ECF0

    AgentBorderColor #46749F
    AgentBackgroundColor #E5ECF0

    UsecaseBorderColor #46749F
    UsecaseBackgroundColor #E5ECF0

    ControlBorderColor #0081C6
    ControlBackgroundColor #55DDCA

}


rectangle "Functional" as functional {

    agent "'First Class' \n Functions" as firstClassFunctions [[https://www.dartlang.org/guides/language/language-tour#functions]]

    agent "Arrow \n Functions" as arrowFunctions [[https://www.dartlang.org/resources/dart-tips/dart-tips-ep-7]]

    agent "Rich \n Collections" as collectionOperators [[https://api.dartlang.org/stable/dart-collection/dart-collection-library.html]]

    agent "Named & Optional \n parameters" as namedParams [[https://www.dartlang.org/guides/language/language-tour#optional-parameters]]

    agent "*sync \n functions" as syncGenerators [[https://www.dartlang.org/articles/language/beyond-async#synchronous-generators-sync]]

    syncGenerators -up-> collectionOperators: generate

}

rectangle "Object Oriented" as objectOriented {

    agent "Named & other \n Constructors" as constructors [[https://www.dartlang.org/guides/language/language-tour#named-constructors]]

    agent "Method \n Cascades" as cascading [[https://www.dartlang.org/guides/language/language-tour#cascade-notation-]]

    agent "Smart \n Getters / Setters" as gettersSetters [[https://www.dartlang.org/guides/language/language-tour#getters-and-setters]]

    agent "Mixins" as mixins [[https://www.dartlang.org/guides/language/language-tour#adding-features-to-a-class-mixins]]

    agent "Implicit \n Interfaces" as interfaces [[https://www.dartlang.org/guides/language/language-tour#implicit-interfaces]]


}

rectangle "Asynchronous" as async {

    agent "Futures" as futures [[https://www.dartlang.org/tutorials/language/futures]]

    agent "async / await" as asyncAwait [[https://www.dartlang.org/tutorials/language/futures#async-and-await]]

    agent "Zones" as zones [[https://www.dartlang.org/articles/libraries/zones]]

    asyncAwait -up-> futures : builds on

    zones -> futures : wrap

    rectangle "Parallel" as concurrent #DDDDDD {

        agent "Isolates" as isolates [[https://api.dartlang.org/stable/dart-isolate/dart-isolate-library.html]]

    }

}

rectangle "Reactive" as reactive {

    agent "Streams" as streams [[https://www.dartlang.org/tutorials/language/streams]]

    agent "await for" as awaitFor [[https://www.dartlang.org/articles/language/beyond-async#await-for]]

    agent "*async \n functions" as asyncGenerators [[https://www.dartlang.org/articles/language/beyond-async#asynchronous-generators-async]]


    awaitFor <- streams: consumed by

    asyncGenerators -up-> streams: generate

    isolates -> streams : communicate \n through

}


rectangle "Dynamic" as dynamic {

    agent "type \n 'dynamic'" as dynamicType [[https://www.dartlang.org/dart-2.0#strong-mode-and-static-typing]]

    agent "noSuchMethod" as noSuchMethod [[https://api.dartlang.org/stable/dart-core/Object/noSuchMethod.html]]

    agent "Mirrors" as mirrors [[https://www.dartlang.org/articles/dart-vm/reflection-with-mirrors]]

}

rectangle "Various" as various {

    agent "String \n Interpolation" as interpolation [[https://www.dartlang.org/guides/language/language-tour#strings]]

    agent "Null aware \n operators" as nullAware [[http://news.dartlang.org/2015/08/dart-112-released-with-null-aware.html]]

}


control "<size:20>Dart Language</size>\n<size:20>Sweet Features</size>" as dartLang


dartLang -up-> functional
dartLang -> async
dartLang -> various
dartLang -> dynamic
dartLang -> reactive
dartLang -up-> objectOriented

@enduml